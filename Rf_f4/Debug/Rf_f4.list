
Rf_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003740  08003740  00005030  2**0
                  CONTENTS
  4 .ARM          00000008  08003740  08003740  00004740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003748  08003748  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003748  08003748  00004748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08003750  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005030  2**0
                  CONTENTS
 10 .bss          000000f0  20000030  20000030  00005030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  00005030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cec  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a42  00000000  00000000  0000cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0000e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000650  00000000  00000000  0000f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbf3  00000000  00000000  0000f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093cb  00000000  00000000  0002f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfd86  00000000  00000000  0003862e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f83b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002130  00000000  00000000  000f83f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  000fa528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003708 	.word	0x08003708

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08003708 	.word	0x08003708

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	4b55      	ldr	r3, [pc, #340]	@ (8000628 <MX_GPIO_Init+0x170>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a54      	ldr	r2, [pc, #336]	@ (8000628 <MX_GPIO_Init+0x170>)
 80004d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b52      	ldr	r3, [pc, #328]	@ (8000628 <MX_GPIO_Init+0x170>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000628 <MX_GPIO_Init+0x170>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000628 <MX_GPIO_Init+0x170>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000628 <MX_GPIO_Init+0x170>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	4b47      	ldr	r3, [pc, #284]	@ (8000628 <MX_GPIO_Init+0x170>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a46      	ldr	r2, [pc, #280]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000510:	f043 0310 	orr.w	r3, r3, #16
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b44      	ldr	r3, [pc, #272]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0310 	and.w	r3, r3, #16
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	4b40      	ldr	r3, [pc, #256]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a3f      	ldr	r2, [pc, #252]	@ (8000628 <MX_GPIO_Init+0x170>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b3d      	ldr	r3, [pc, #244]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	4b39      	ldr	r3, [pc, #228]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a38      	ldr	r2, [pc, #224]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b36      	ldr	r3, [pc, #216]	@ (8000628 <MX_GPIO_Init+0x170>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000560:	4832      	ldr	r0, [pc, #200]	@ (800062c <MX_GPIO_Init+0x174>)
 8000562:	f001 fe23 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000566:	2200      	movs	r2, #0
 8000568:	f24f 01c0 	movw	r1, #61632	@ 0xf0c0
 800056c:	4830      	ldr	r0, [pc, #192]	@ (8000630 <MX_GPIO_Init+0x178>)
 800056e:	f001 fe1d 	bl	80021ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000572:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000578:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4828      	ldr	r0, [pc, #160]	@ (800062c <MX_GPIO_Init+0x174>)
 800058a:	f001 fc73 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800058e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4821      	ldr	r0, [pc, #132]	@ (800062c <MX_GPIO_Init+0x174>)
 80005a8:	f001 fc64 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	481c      	ldr	r0, [pc, #112]	@ (8000634 <MX_GPIO_Init+0x17c>)
 80005c4:	f001 fc56 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80005c8:	f24f 03c0 	movw	r3, #61632	@ 0xf0c0
 80005cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <MX_GPIO_Init+0x178>)
 80005e2:	f001 fc47 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005e6:	2320      	movs	r3, #32
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_GPIO_Init+0x178>)
 80005fc:	f001 fc3a 	bl	8001e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2017      	movs	r0, #23
 8000606:	f001 fbfe 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800060a:	2017      	movs	r0, #23
 800060c:	f001 fc17 	bl	8001e3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2028      	movs	r0, #40	@ 0x28
 8000616:	f001 fbf6 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061a:	2028      	movs	r0, #40	@ 0x28
 800061c:	f001 fc0f 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	@ 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40021000 	.word	0x40021000
 8000630:	40020c00 	.word	0x40020c00
 8000634:	40020400 	.word	0x40020400

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f001 fa71 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f87b 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f7ff ff37 	bl	80004b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064a:	f001 f8bd 	bl	80017c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800064e:	f001 f8f1 	bl	8001834 <MX_SPI2_Init>
	#ifdef RECEIVER
		nrf24l01p_rx_init(2500, _1Mbps);
	#endif

	#ifdef TRANSMITTER
		nrf24l01p_tx_init(2500, _1Mbps);
 8000652:	2100      	movs	r1, #0
 8000654:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000658:	f000 fe76 	bl	8001348 <nrf24l01p_tx_init>
    #endif

	#ifdef RECEIVER_2
		uint8_t RxAddress0[5] = {0x78, 0x78, 0x78, 0x78, 0x78};
 800065c:	4a33      	ldr	r2, [pc, #204]	@ (800072c <main+0xf4>)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000666:	6018      	str	r0, [r3, #0]
 8000668:	3304      	adds	r3, #4
 800066a:	7019      	strb	r1, [r3, #0]
		uint8_t RxAddress1[5] = {0xB3, 0xB4, 0xB5, 0xB6, 0xCD};
 800066c:	4a30      	ldr	r2, [pc, #192]	@ (8000730 <main+0xf8>)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	6018      	str	r0, [r3, #0]
 8000676:	3304      	adds	r3, #4
 8000678:	7019      	strb	r1, [r3, #0]
		uint8_t RxAddress2 = 0xF3;
 800067a:	23f3      	movs	r3, #243	@ 0xf3
 800067c:	70fb      	strb	r3, [r7, #3]
		uint8_t RxAddress3 = 0xF2;
 800067e:	23f2      	movs	r3, #242	@ 0xf2
 8000680:	70bb      	strb	r3, [r7, #2]
		uint8_t RxAddress4 = 0xF4;
 8000682:	23f4      	movs	r3, #244	@ 0xf4
 8000684:	707b      	strb	r3, [r7, #1]
		uint8_t RxAddress5 = 0xF1;
 8000686:	23f1      	movs	r3, #241	@ 0xf1
 8000688:	703b      	strb	r3, [r7, #0]

		NRF24L01_RxInit(50, NRF24L01_DATA_RATE_1MBPS, 2000);
 800068a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800068e:	2100      	movs	r1, #0
 8000690:	2032      	movs	r0, #50	@ 0x32
 8000692:	f000 f983 	bl	800099c <NRF24L01_RxInit>
		NRF24L01_SetRxAddress(NRF24L01_RX_ADDRESS_P0, RxAddress0, 2000);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800069e:	4619      	mov	r1, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fbaf 	bl	8000e04 <NRF24L01_SetRxAddress>
		NRF24L01_SetRxAddress(NRF24L01_RX_ADDRESS_P1, RxAddress1, 2000);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006ac:	4619      	mov	r1, r3
 80006ae:	2002      	movs	r0, #2
 80006b0:	f000 fba8 	bl	8000e04 <NRF24L01_SetRxAddress>
		NRF24L01_SetRxAddress(NRF24L01_RX_ADDRESS_P2, &RxAddress2, 2000);
 80006b4:	1cfb      	adds	r3, r7, #3
 80006b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006ba:	4619      	mov	r1, r3
 80006bc:	2004      	movs	r0, #4
 80006be:	f000 fba1 	bl	8000e04 <NRF24L01_SetRxAddress>
		NRF24L01_SetRxAddress(NRF24L01_RX_ADDRESS_P3, &RxAddress3, 2000);
 80006c2:	1cbb      	adds	r3, r7, #2
 80006c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006c8:	4619      	mov	r1, r3
 80006ca:	2008      	movs	r0, #8
 80006cc:	f000 fb9a 	bl	8000e04 <NRF24L01_SetRxAddress>
		NRF24L01_SetRxAddress(NRF24L01_RX_ADDRESS_P4, &RxAddress4, 2000);
 80006d0:	1c7b      	adds	r3, r7, #1
 80006d2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006d6:	4619      	mov	r1, r3
 80006d8:	2010      	movs	r0, #16
 80006da:	f000 fb93 	bl	8000e04 <NRF24L01_SetRxAddress>
		NRF24L01_SetRxAddress(NRF24L01_RX_ADDRESS_P5, &RxAddress5, 2000);
 80006de:	463b      	mov	r3, r7
 80006e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006e4:	4619      	mov	r1, r3
 80006e6:	2020      	movs	r0, #32
 80006e8:	f000 fb8c 	bl	8000e04 <NRF24L01_SetRxAddress>
		  // Nothing to do
	  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		#endif
		#ifdef TRANSMITTER

		  for(int i= 0; i < 8; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e00d      	b.n	800070e <main+0xd6>
		  {
			  tx_data[i]++;
 80006f2:	4a10      	ldr	r2, [pc, #64]	@ (8000734 <main+0xfc>)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <main+0xfc>)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		  for(int i= 0; i < 8; i++)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b07      	cmp	r3, #7
 8000712:	ddee      	ble.n	80006f2 <main+0xba>
		  }
		  nrf24l01p_tx_transmit(tx_data);
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <main+0xfc>)
 8000716:	f000 fe42 	bl	800139e <nrf24l01p_tx_transmit>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <main+0x100>)
 8000720:	f001 fd5d 	bl	80021de <HAL_GPIO_TogglePin>

		#endif
		#ifdef TRANSMITTER_2
				NRF24L01_TxTransmit(tx_data, 2000);
		#endif
		HAL_Delay(100);
 8000724:	2064      	movs	r0, #100	@ 0x64
 8000726:	f001 fa6f 	bl	8001c08 <HAL_Delay>
		  for(int i= 0; i < 8; i++)
 800072a:	e7df      	b.n	80006ec <main+0xb4>
 800072c:	08003720 	.word	0x08003720
 8000730:	08003728 	.word	0x08003728
 8000734:	20000000 	.word	0x20000000
 8000738:	40020c00 	.word	0x40020c00

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	@ 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 ffb0 	bl	80036b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <SystemClock_Config+0xcc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a21      	ldr	r2, [pc, #132]	@ (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b0:	23a8      	movs	r3, #168	@ 0xa8
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fd3f 	bl	8002244 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007cc:	f000 f848 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2105      	movs	r1, #5
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ffa0 	bl	8002734 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007fa:	f000 f831 	bl	8000860 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	2b20      	cmp	r3, #32
 800081e:	d106      	bne.n	800082e <HAL_GPIO_EXTI_Callback+0x1e>
				nrf24l01p_rx_receive(rx_data);
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
		#endif

		#ifdef TRANSMITTER
				nrf24l01p_tx_irq();
 8000820:	f000 fdc8 	bl	80013b4 <nrf24l01p_tx_irq>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x44>)
 800082a:	f001 fcd8 	bl	80021de <HAL_GPIO_TogglePin>
		#endif
	}
	#ifdef RECEIVER_2
		if(GPIO_Pin == NRF24L01_IRQ_GPIO_PIN)
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000834:	d10a      	bne.n	800084c <HAL_GPIO_EXTI_Callback+0x3c>
		{
			NRF24L01_RxReceive(rx_data, &RxNumber, 4000);
 8000836:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800083a:	4907      	ldr	r1, [pc, #28]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x48>)
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <HAL_GPIO_EXTI_Callback+0x4c>)
 800083e:	f000 f9e3 	bl	8000c08 <NRF24L01_RxReceive>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000842:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000846:	4803      	ldr	r0, [pc, #12]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x44>)
 8000848:	f001 fcc9 	bl	80021de <HAL_GPIO_TogglePin>
		{
			NRF24L01_TxIRQHandle(2000);
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
	#endif
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020c00 	.word	0x40020c00
 8000858:	20000020 	.word	0x20000020
 800085c:	2000004c 	.word	0x2000004c

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <NRF24L01_ReadRegister>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ G Enum ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ G Struct ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ G Types ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Function ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
uint8_t NRF24L01_ReadRegister(uint8_t Reg, uint16_t Timeout)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	80bb      	strh	r3, [r7, #4]
	
	uint8_t cmd = NRF24L01_CMD_R_REGISTER | Reg;
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	73fb      	strb	r3, [r7, #15]
	
	uint8_t status;
	uint8_t regVal;
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000886:	480f      	ldr	r0, [pc, #60]	@ (80008c4 <NRF24L01_ReadRegister+0x58>)
 8000888:	f001 fc90 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Receive Data ---------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, Timeout);
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	f107 020e 	add.w	r2, r7, #14
 8000892:	f107 010f 	add.w	r1, r7, #15
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2301      	movs	r3, #1
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <NRF24L01_ReadRegister+0x5c>)
 800089c:	f002 fc1c 	bl	80030d8 <HAL_SPI_TransmitReceive>
	
	NRF24L01_SPI_Receive(&regVal, 1, Timeout);
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	f107 010d 	add.w	r1, r7, #13
 80008a6:	2201      	movs	r2, #1
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <NRF24L01_ReadRegister+0x5c>)
 80008aa:	f002 fafc 	bl	8002ea6 <HAL_SPI_Receive>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <NRF24L01_ReadRegister+0x58>)
 80008b6:	f001 fc79 	bl	80021ac <HAL_GPIO_WritePin>

	return regVal;
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
	
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	200000c4 	.word	0x200000c4

080008cc <NRF24L01_WriteRegister>:

void NRF24L01_WriteRegister(uint8_t Reg, uint8_t Data, uint16_t Timeout)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	460b      	mov	r3, r1
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	4613      	mov	r3, r2
 80008dc:	80bb      	strh	r3, [r7, #4]
	
	uint8_t cmd = NRF24L01_CMD_W_REGISTER | Reg;
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f043 0320 	orr.w	r3, r3, #32
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	73fb      	strb	r3, [r7, #15]
	
	uint8_t status;
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ee:	480e      	ldr	r0, [pc, #56]	@ (8000928 <NRF24L01_WriteRegister+0x5c>)
 80008f0:	f001 fc5c 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, Timeout);
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	f107 020e 	add.w	r2, r7, #14
 80008fa:	f107 010f 	add.w	r1, r7, #15
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	480a      	ldr	r0, [pc, #40]	@ (800092c <NRF24L01_WriteRegister+0x60>)
 8000904:	f002 fbe8 	bl	80030d8 <HAL_SPI_TransmitReceive>

	NRF24L01_SPI_Transmit(&Data, 1, Timeout);
 8000908:	88bb      	ldrh	r3, [r7, #4]
 800090a:	1db9      	adds	r1, r7, #6
 800090c:	2201      	movs	r2, #1
 800090e:	4807      	ldr	r0, [pc, #28]	@ (800092c <NRF24L01_WriteRegister+0x60>)
 8000910:	f002 f985 	bl	8002c1e <HAL_SPI_Transmit>

	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <NRF24L01_WriteRegister+0x5c>)
 800091c:	f001 fc46 	bl	80021ac <HAL_GPIO_WritePin>

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000
 800092c:	200000c4 	.word	0x200000c4

08000930 <NRF24L01_WriteRegisterMulti>:

void NRF24L01_WriteRegisterMulti(uint8_t Reg, uint8_t *Data, uint16_t Size, uint16_t Timeout)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	4611      	mov	r1, r2
 800093a:	461a      	mov	r2, r3
 800093c:	4603      	mov	r3, r0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	460b      	mov	r3, r1
 8000942:	81bb      	strh	r3, [r7, #12]
 8000944:	4613      	mov	r3, r2
 8000946:	80fb      	strh	r3, [r7, #6]
	
	uint8_t cmd = NRF24L01_CMD_W_REGISTER | Reg;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	b2db      	uxtb	r3, r3
 8000950:	75fb      	strb	r3, [r7, #23]
	
	uint8_t status;
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000958:	480e      	ldr	r0, [pc, #56]	@ (8000994 <NRF24L01_WriteRegisterMulti+0x64>)
 800095a:	f001 fc27 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, Timeout);
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	f107 0216 	add.w	r2, r7, #22
 8000964:	f107 0117 	add.w	r1, r7, #23
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	480a      	ldr	r0, [pc, #40]	@ (8000998 <NRF24L01_WriteRegisterMulti+0x68>)
 800096e:	f002 fbb3 	bl	80030d8 <HAL_SPI_TransmitReceive>
	
	NRF24L01_SPI_Transmit(Data, Size, Timeout);
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	89ba      	ldrh	r2, [r7, #12]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <NRF24L01_WriteRegisterMulti+0x68>)
 800097a:	f002 f950 	bl	8002c1e <HAL_SPI_Transmit>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <NRF24L01_WriteRegisterMulti+0x64>)
 8000986:	f001 fc11 	bl	80021ac <HAL_GPIO_WritePin>
	
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	200000c4 	.word	0x200000c4

0800099c <NRF24L01_RxInit>:

/* ......................... Initialize ........................ */
void NRF24L01_RxInit(uint8_t Channel, NRF24L01_DataRateTypeDef DataRate, uint16_t Timeout)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80bb      	strh	r3, [r7, #4]
	
	/* ------------------ Reset NRF ----------------- */
	NRF24L01_Reset(Timeout);
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f849 	bl	8000a48 <NRF24L01_Reset>
	
	/* ----------- Set NRF Payload Length ----------- */
	NRF24L01_SetRxPayloadWidths(NRF24L01_PAYLOAD_LENGTH, Timeout);
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2020      	movs	r0, #32
 80009bc:	f000 fada 	bl	8000f74 <NRF24L01_SetRxPayloadWidths>
	
	/* ------------- Set NRF Radio Param ------------ */
	NRF24L01_SetRFChannel(Channel, Timeout);
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fbaa 	bl	8001120 <NRF24L01_SetRFChannel>
	NRF24L01_SetRFAirDataRate(DataRate, Timeout);
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fbd9 	bl	800118a <NRF24L01_SetRFAirDataRate>
	NRF24L01_SetRFTxOutputPower(NRF24L01_PWR_0DBM, Timeout);
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	4619      	mov	r1, r3
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 fbb1 	bl	8001144 <NRF24L01_SetRFTxOutputPower>
	
	/* ------------- Set NRF CRC Length ------------- */
	NRF24L01_SetCRCLength(1, Timeout);
 80009e2:	88bb      	ldrh	r3, [r7, #4]
 80009e4:	4619      	mov	r1, r3
 80009e6:	2001      	movs	r0, #1
 80009e8:	f000 faf4 	bl	8000fd4 <NRF24L01_SetCRCLength>

	/* ---------------- Set Auto ACK ---------------- */
	NRF24L01_SetAutoACK(NRF24L01_AUTO_ACK_ALL, NRF24L01_ENABLE, Timeout);
 80009ec:	88bb      	ldrh	r3, [r7, #4]
 80009ee:	461a      	mov	r2, r3
 80009f0:	2101      	movs	r1, #1
 80009f2:	203f      	movs	r0, #63	@ 0x3f
 80009f4:	f000 fb1d 	bl	8001032 <NRF24L01_SetAutoACK>

	/* ------------- Enable Rx Addresses ------------ */
	NRF24L01_EnableRxAddress(NRF24L01_RX_ADDRESS_ALL, Timeout);
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	4619      	mov	r1, r3
 80009fc:	203f      	movs	r0, #63	@ 0x3f
 80009fe:	f000 f9d1 	bl	8000da4 <NRF24L01_EnableRxAddress>
	
	/* ----------- Set NRF Address Width ------------ */
	NRF24L01_SetAddressWidths(NRF24L01_ADDRESS_WIDTH, Timeout);
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	4619      	mov	r1, r3
 8000a06:	2005      	movs	r0, #5
 8000a08:	f000 f9e8 	bl	8000ddc <NRF24L01_SetAddressWidths>
	
	/* ----------- Set NRF Auto Retransmit ---------- */
	NRF24L01_AutoRetransmitCount(3, Timeout);
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 fb39 	bl	8001088 <NRF24L01_AutoRetransmitCount>
	NRF24L01_AutoRetransmitDelay(250, Timeout);
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	20fa      	movs	r0, #250	@ 0xfa
 8000a1c:	f000 fb54 	bl	80010c8 <NRF24L01_AutoRetransmitDelay>

	/* ---------------- Set NRF Power --------------- */
	NRF24L01_PRxMode(Timeout);
 8000a20:	88bb      	ldrh	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f8d6 	bl	8000bd4 <NRF24L01_PRxMode>
	NRF24L01_PowerUp(Timeout);
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f9a0 	bl	8000d70 <NRF24L01_PowerUp>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_CE_GPIO_PORT, NRF24L01_CE_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a36:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <NRF24L01_RxInit+0xa8>)
 8000a38:	f001 fbb8 	bl	80021ac <HAL_GPIO_WritePin>
	
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000

08000a48 <NRF24L01_Reset>:
	
}

/* .......................... Control .......................... */
void NRF24L01_Reset(uint16_t Timeout)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
	
	uint8_t data[NRF24L01_ADDRESS_WIDTH];
	
	/* ---------- Set Pin to default Select --------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a58:	485d      	ldr	r0, [pc, #372]	@ (8000bd0 <NRF24L01_Reset+0x188>)
 8000a5a:	f001 fba7 	bl	80021ac <HAL_GPIO_WritePin>
	NRF24L01_GPIO_WritePin(NRF24L01_CE_GPIO_PORT, NRF24L01_CE_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a64:	485a      	ldr	r0, [pc, #360]	@ (8000bd0 <NRF24L01_Reset+0x188>)
 8000a66:	f001 fba1 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------- Set Registers to default ---------- */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_REG_DEF_CONFIG, Timeout);
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2108      	movs	r1, #8
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff2b 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, NRF24L01_REG_DEF_EN_AA, Timeout);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	213f      	movs	r1, #63	@ 0x3f
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff25 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, NRF24L01_REG_DEF_EN_RXADDR, Timeout);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	461a      	mov	r2, r3
 8000a86:	2103      	movs	r1, #3
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff ff1f 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, NRF24L01_REG_DEF_SETUP_AW, Timeout);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	461a      	mov	r2, r3
 8000a92:	2103      	movs	r1, #3
 8000a94:	2003      	movs	r0, #3
 8000a96:	f7ff ff19 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, NRF24L01_REG_DEF_SETUP_RETR, Timeout);
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f7ff ff13 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, NRF24L01_REG_DEF_RF_CH, Timeout);
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2102      	movs	r1, #2
 8000aac:	2005      	movs	r0, #5
 8000aae:	f7ff ff0d 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, NRF24L01_REG_DEF_RF_SETUP, Timeout);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	2006      	movs	r0, #6
 8000aba:	f7ff ff07 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, NRF24L01_REG_DEF_STATUS, Timeout);
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	217e      	movs	r1, #126	@ 0x7e
 8000ac4:	2007      	movs	r0, #7
 8000ac6:	f7ff ff01 	bl	80008cc <NRF24L01_WriteRegister>
	
	/* Data Pipe 0 and Tx Address */
	data[0] = NRF24L01_REG_DEF_RX_ADDR_P0;
 8000aca:	23e7      	movs	r3, #231	@ 0xe7
 8000acc:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEF_RX_ADDR_P0;
 8000ace:	23e7      	movs	r3, #231	@ 0xe7
 8000ad0:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEF_RX_ADDR_P0;
 8000ad2:	23e7      	movs	r3, #231	@ 0xe7
 8000ad4:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEF_RX_ADDR_P0;
 8000ad6:	23e7      	movs	r3, #231	@ 0xe7
 8000ad8:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEF_RX_ADDR_P0;
 8000ada:	23e7      	movs	r3, #231	@ 0xe7
 8000adc:	733b      	strb	r3, [r7, #12]
	
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, data, NRF24L01_ADDRESS_WIDTH, Timeout);
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f107 0108 	add.w	r1, r7, #8
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f7ff ff22 	bl	8000930 <NRF24L01_WriteRegisterMulti>
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, data, NRF24L01_ADDRESS_WIDTH, Timeout);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	f107 0108 	add.w	r1, r7, #8
 8000af2:	2205      	movs	r2, #5
 8000af4:	2010      	movs	r0, #16
 8000af6:	f7ff ff1b 	bl	8000930 <NRF24L01_WriteRegisterMulti>
	
	/* Data Pipe 1 */
	data[0] = NRF24L01_REG_DEF_RX_ADDR_P1;
 8000afa:	23c2      	movs	r3, #194	@ 0xc2
 8000afc:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEF_RX_ADDR_P1;
 8000afe:	23c2      	movs	r3, #194	@ 0xc2
 8000b00:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEF_RX_ADDR_P1;
 8000b02:	23c2      	movs	r3, #194	@ 0xc2
 8000b04:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEF_RX_ADDR_P1;
 8000b06:	23c2      	movs	r3, #194	@ 0xc2
 8000b08:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEF_RX_ADDR_P1;
 8000b0a:	23c2      	movs	r3, #194	@ 0xc2
 8000b0c:	733b      	strb	r3, [r7, #12]
	
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, data, NRF24L01_ADDRESS_WIDTH, Timeout);
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f107 0108 	add.w	r1, r7, #8
 8000b14:	2205      	movs	r2, #5
 8000b16:	200b      	movs	r0, #11
 8000b18:	f7ff ff0a 	bl	8000930 <NRF24L01_WriteRegisterMulti>
	
	/* Data Pipe 2 to 5 */
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P2, NRF24L01_REG_DEF_RX_ADDR_P2, Timeout);
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	21c3      	movs	r1, #195	@ 0xc3
 8000b22:	200c      	movs	r0, #12
 8000b24:	f7ff fed2 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P3, NRF24L01_REG_DEF_RX_ADDR_P3, Timeout);
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	21c4      	movs	r1, #196	@ 0xc4
 8000b2e:	200d      	movs	r0, #13
 8000b30:	f7ff fecc 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P4, NRF24L01_REG_DEF_RX_ADDR_P4, Timeout);
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	461a      	mov	r2, r3
 8000b38:	21c5      	movs	r1, #197	@ 0xc5
 8000b3a:	200e      	movs	r0, #14
 8000b3c:	f7ff fec6 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P5, NRF24L01_REG_DEF_RX_ADDR_P5, Timeout);
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	461a      	mov	r2, r3
 8000b44:	21c6      	movs	r1, #198	@ 0xc6
 8000b46:	200f      	movs	r0, #15
 8000b48:	f7ff fec0 	bl	80008cc <NRF24L01_WriteRegister>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, NRF24L01_REG_DEF_RX_PW_P0_P5, Timeout);
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	2011      	movs	r0, #17
 8000b54:	f7ff feba 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, NRF24L01_REG_DEF_RX_PW_P0_P5, Timeout);
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2012      	movs	r0, #18
 8000b60:	f7ff feb4 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, NRF24L01_REG_DEF_RX_PW_P0_P5, Timeout);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	461a      	mov	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2013      	movs	r0, #19
 8000b6c:	f7ff feae 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, NRF24L01_REG_DEF_RX_PW_P0_P5, Timeout);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	461a      	mov	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	2014      	movs	r0, #20
 8000b78:	f7ff fea8 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, NRF24L01_REG_DEF_RX_PW_P0_P5, Timeout);
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	2015      	movs	r0, #21
 8000b84:	f7ff fea2 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, NRF24L01_REG_DEF_RX_PW_P0_P5, Timeout);
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2016      	movs	r0, #22
 8000b90:	f7ff fe9c 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEF_FIFO_STATUS, Timeout);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	461a      	mov	r2, r3
 8000b98:	2111      	movs	r1, #17
 8000b9a:	2017      	movs	r0, #23
 8000b9c:	f7ff fe96 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, NRF24L01_REG_DEF_DYNPD, Timeout);
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f7ff fe90 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, NRF24L01_REG_DEF_FEATURE, Timeout);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	201d      	movs	r0, #29
 8000bb4:	f7ff fe8a 	bl	80008cc <NRF24L01_WriteRegister>
	
	/* ----------------- Reset FIFO ----------------- */
	NRF24L01_FlushRxFIFO(Timeout);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f88c 	bl	8000cd8 <NRF24L01_FlushRxFIFO>
	NRF24L01_FlushTxFIFO(Timeout);
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f8ae 	bl	8000d24 <NRF24L01_FlushTxFIFO>
	
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NRF24L01_PRxMode>:

/* ........................ Primary Mode ....................... */
void NRF24L01_PRxMode(uint16_t Timeout)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
	
	/* ------------ Read Config Register ------------ */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_CONFIG, Timeout);
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	4619      	mov	r1, r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fe42 	bl	800086c <NRF24L01_ReadRegister>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]
	
	/* ----------- Set Mode to Primary Rx ----------- */
	__NRF24L01_SET_BIT(regVal, NRF24L01_PRIM_RX);
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, regVal, Timeout);
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fe66 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <NRF24L01_RxReceive>:
	
}

/* ...................... Transmit/Receive ..................... */
void NRF24L01_RxReceive(uint8_t *pRxPayload, uint8_t *RxPayloadNumber, uint16_t Timeout)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	4613      	mov	r3, r2
 8000c14:	80fb      	strh	r3, [r7, #6]
	
	/* ------------- Read Received Data ------------- */
	*RxPayloadNumber = (NRF24L01_ReadRegister(NRF24L01_REG_STATUS, Timeout) >> 1) & 0x07;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f7ff fe26 	bl	800086c <NRF24L01_ReadRegister>
 8000c20:	4603      	mov	r3, r0
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	701a      	strb	r2, [r3, #0]
	NRF24L01_ReadRxFIFO(pRxPayload, Timeout);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4619      	mov	r1, r3
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f000 f821 	bl	8000c7c <NRF24L01_ReadRxFIFO>
	
	/* ----------------- Clear bit ------------------ */
	NRF24L01_ClearRxDR(Timeout);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f804 	bl	8000c4a <NRF24L01_ClearRxDR>
	
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <NRF24L01_ClearRxDR>:
	NRF24L01_WriteTxFIFO(pTxPayload, Timeout);
}

/* Rx/Tx Status Control */
void NRF24L01_ClearRxDR(uint16_t Timeout)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	80fb      	strh	r3, [r7, #6]
	
	/* ------------ Read Status Register ------------ */
	uint8_t status = NRF24L01_GetStatus(Timeout);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 faca 	bl	80011f0 <NRF24L01_GetStatus>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
	
	/* ----------- Clear Rx Data Ready bit ---------- */
	__NRF24L01_SET_BIT(status, NRF24L01_RX_DR);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c66:	73fb      	strb	r3, [r7, #15]
	
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, status, Timeout);
 8000c68:	88fa      	ldrh	r2, [r7, #6]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2007      	movs	r0, #7
 8000c70:	f7ff fe2c 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <NRF24L01_ReadRxFIFO>:
}

/* ........................ FIFO Control ....................... */
/* Read/Write */
uint8_t NRF24L01_ReadRxFIFO(uint8_t *pRxPayload, uint16_t Timeout)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
	
	uint8_t cmd = NRF24L01_CMD_R_RX_PAYLOAD;
 8000c88:	2361      	movs	r3, #97	@ 0x61
 8000c8a:	73fb      	strb	r3, [r7, #15]
	
	uint8_t status;
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c92:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <NRF24L01_ReadRxFIFO+0x54>)
 8000c94:	f001 fa8a 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Receive Data ---------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, Timeout);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	f107 020e 	add.w	r2, r7, #14
 8000c9e:	f107 010f 	add.w	r1, r7, #15
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <NRF24L01_ReadRxFIFO+0x58>)
 8000ca8:	f002 fa16 	bl	80030d8 <HAL_SPI_TransmitReceive>
	
	NRF24L01_SPI_Receive(pRxPayload, NRF24L01_PAYLOAD_LENGTH, Timeout);
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	2220      	movs	r2, #32
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4808      	ldr	r0, [pc, #32]	@ (8000cd4 <NRF24L01_ReadRxFIFO+0x58>)
 8000cb4:	f002 f8f7 	bl	8002ea6 <HAL_SPI_Receive>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <NRF24L01_ReadRxFIFO+0x54>)
 8000cc0:	f001 fa74 	bl	80021ac <HAL_GPIO_WritePin>
	
	return status;
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
	
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	200000c4 	.word	0x200000c4

08000cd8 <NRF24L01_FlushRxFIFO>:
	
}

/* Flush */
void NRF24L01_FlushRxFIFO(uint16_t Timeout)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	
	uint8_t cmd = NRF24L01_CMD_FLUSH_RX;
 8000ce2:	23e2      	movs	r3, #226	@ 0xe2
 8000ce4:	73fb      	strb	r3, [r7, #15]
	
	uint8_t status;
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cec:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <NRF24L01_FlushRxFIFO+0x44>)
 8000cee:	f001 fa5d 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, Timeout);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f107 020e 	add.w	r2, r7, #14
 8000cf8:	f107 010f 	add.w	r1, r7, #15
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <NRF24L01_FlushRxFIFO+0x48>)
 8000d02:	f002 f9e9 	bl	80030d8 <HAL_SPI_TransmitReceive>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <NRF24L01_FlushRxFIFO+0x44>)
 8000d0e:	f001 fa4d 	bl	80021ac <HAL_GPIO_WritePin>
	
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	200000c4 	.word	0x200000c4

08000d24 <NRF24L01_FlushTxFIFO>:

void NRF24L01_FlushTxFIFO(uint16_t Timeout)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
	
	uint8_t cmd = NRF24L01_CMD_FLUSH_TX;
 8000d2e:	23e1      	movs	r3, #225	@ 0xe1
 8000d30:	73fb      	strb	r3, [r7, #15]
	
	uint8_t status;

	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <NRF24L01_FlushTxFIFO+0x44>)
 8000d3a:	f001 fa37 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Transmit Data --------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, Timeout);
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	f107 020e 	add.w	r2, r7, #14
 8000d44:	f107 010f 	add.w	r1, r7, #15
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <NRF24L01_FlushTxFIFO+0x48>)
 8000d4e:	f002 f9c3 	bl	80030d8 <HAL_SPI_TransmitReceive>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <NRF24L01_FlushTxFIFO+0x44>)
 8000d5a:	f001 fa27 	bl	80021ac <HAL_GPIO_WritePin>
	
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	200000c4 	.word	0x200000c4

08000d70 <NRF24L01_PowerUp>:
	return NRF24L01_ReadRegister(NRF24L01_REG_FIFO_STATUS, Timeout);
}

/* ........................... Power ........................... */
void NRF24L01_PowerUp(uint16_t Timeout)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	
	/* ------------ Read Config Register ------------ */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_CONFIG, Timeout);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fd74 	bl	800086c <NRF24L01_ReadRegister>
 8000d84:	4603      	mov	r3, r0
 8000d86:	73fb      	strb	r3, [r7, #15]
	
	/* ------------ Set Chip to Power Up ------------ */
	__NRF24L01_SET_BIT(regVal, NRF24L01_PWR_UP);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	73fb      	strb	r3, [r7, #15]
	
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, regVal, Timeout);
 8000d90:	88fa      	ldrh	r2, [r7, #6]
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fd98 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24L01_EnableRxAddress>:

}

/* ......................... RF Address ........................ */
void NRF24L01_EnableRxAddress(NRF24L01_RxAddTypeDef RxAddress, uint16_t Timeout)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	80bb      	strh	r3, [r7, #4]

	/* ------------ Read Config Register ------------ */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_EN_RXADDR, Timeout) | RxAddress;
 8000db4:	88bb      	ldrh	r3, [r7, #4]
 8000db6:	4619      	mov	r1, r3
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff fd57 	bl	800086c <NRF24L01_ReadRegister>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	73fb      	strb	r3, [r7, #15]

	/* -------------- Update Auto ACK --------------- */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, regVal, Timeout);
 8000dc8:	88ba      	ldrh	r2, [r7, #4]
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff fd7c 	bl	80008cc <NRF24L01_WriteRegister>

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <NRF24L01_SetAddressWidths>:
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, regVal, Timeout);

}

void NRF24L01_SetAddressWidths(uint8_t Width, uint16_t Timeout)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80bb      	strh	r3, [r7, #4]
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, (Width - 2), Timeout);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	3b02      	subs	r3, #2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	88ba      	ldrh	r2, [r7, #4]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff fd68 	bl	80008cc <NRF24L01_WriteRegister>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24L01_SetRxAddress>:

void NRF24L01_SetRxAddress(NRF24L01_RxAddTypeDef RxAddress, uint8_t *Address, uint16_t Timeout) // My Address
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	80bb      	strh	r3, [r7, #4]

	uint8_t _addressIndx = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

	uint8_t _address[NRF24L01_ADDRESS_WIDTH];

	/* --------------- Set Chip Enable -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_CE_GPIO_PORT, NRF24L01_CE_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e1e:	4854      	ldr	r0, [pc, #336]	@ (8000f70 <NRF24L01_SetRxAddress+0x16c>)
 8000e20:	f001 f9c4 	bl	80021ac <HAL_GPIO_WritePin>

	/* --------------- Update Address --------------- */
	switch (RxAddress)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	f200 8095 	bhi.w	8000f58 <NRF24L01_SetRxAddress+0x154>
 8000e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e34 <NRF24L01_SetRxAddress+0x30>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000ed1 	.word	0x08000ed1
 8000e38:	08000f03 	.word	0x08000f03
 8000e3c:	08000f59 	.word	0x08000f59
 8000e40:	08000f19 	.word	0x08000f19
 8000e44:	08000f59 	.word	0x08000f59
 8000e48:	08000f59 	.word	0x08000f59
 8000e4c:	08000f59 	.word	0x08000f59
 8000e50:	08000f29 	.word	0x08000f29
 8000e54:	08000f59 	.word	0x08000f59
 8000e58:	08000f59 	.word	0x08000f59
 8000e5c:	08000f59 	.word	0x08000f59
 8000e60:	08000f59 	.word	0x08000f59
 8000e64:	08000f59 	.word	0x08000f59
 8000e68:	08000f59 	.word	0x08000f59
 8000e6c:	08000f59 	.word	0x08000f59
 8000e70:	08000f39 	.word	0x08000f39
 8000e74:	08000f59 	.word	0x08000f59
 8000e78:	08000f59 	.word	0x08000f59
 8000e7c:	08000f59 	.word	0x08000f59
 8000e80:	08000f59 	.word	0x08000f59
 8000e84:	08000f59 	.word	0x08000f59
 8000e88:	08000f59 	.word	0x08000f59
 8000e8c:	08000f59 	.word	0x08000f59
 8000e90:	08000f59 	.word	0x08000f59
 8000e94:	08000f59 	.word	0x08000f59
 8000e98:	08000f59 	.word	0x08000f59
 8000e9c:	08000f59 	.word	0x08000f59
 8000ea0:	08000f59 	.word	0x08000f59
 8000ea4:	08000f59 	.word	0x08000f59
 8000ea8:	08000f59 	.word	0x08000f59
 8000eac:	08000f59 	.word	0x08000f59
 8000eb0:	08000f49 	.word	0x08000f49
		case NRF24L01_RX_ADDRESS_P0:
		{

			for (; _addressIndx < NRF24L01_ADDRESS_WIDTH; _addressIndx++)
			{
				_address[_addressIndx] = Address[NRF24L01_ADDRESS_WIDTH - _addressIndx - 1];
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	f1c3 0304 	rsb	r3, r3, #4
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	441a      	add	r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	3310      	adds	r3, #16
 8000ec4:	443b      	add	r3, r7
 8000ec6:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (; _addressIndx < NRF24L01_ADDRESS_WIDTH; _addressIndx++)
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d9ee      	bls.n	8000eb4 <NRF24L01_SetRxAddress+0xb0>
			}

			NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, _address, NRF24L01_ADDRESS_WIDTH, Timeout);
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	f107 0108 	add.w	r1, r7, #8
 8000edc:	2205      	movs	r2, #5
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f7ff fd26 	bl	8000930 <NRF24L01_WriteRegisterMulti>

		}
		break;
 8000ee4:	e039      	b.n	8000f5a <NRF24L01_SetRxAddress+0x156>
		case NRF24L01_RX_ADDRESS_P1:
		{

			for (; _addressIndx < NRF24L01_ADDRESS_WIDTH; _addressIndx++)
			{
				_address[_addressIndx] = Address[NRF24L01_ADDRESS_WIDTH - _addressIndx - 1];
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	f1c3 0304 	rsb	r3, r3, #4
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	441a      	add	r2, r3
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	443b      	add	r3, r7
 8000ef8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (; _addressIndx < NRF24L01_ADDRESS_WIDTH; _addressIndx++)
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	3301      	adds	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d9ee      	bls.n	8000ee6 <NRF24L01_SetRxAddress+0xe2>
			}

			NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, _address, NRF24L01_ADDRESS_WIDTH, Timeout);
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	f107 0108 	add.w	r1, r7, #8
 8000f0e:	2205      	movs	r2, #5
 8000f10:	200b      	movs	r0, #11
 8000f12:	f7ff fd0d 	bl	8000930 <NRF24L01_WriteRegisterMulti>

		}
		break;
 8000f16:	e020      	b.n	8000f5a <NRF24L01_SetRxAddress+0x156>
		case NRF24L01_RX_ADDRESS_P2:
		{
			NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P2, Address[0], Timeout);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	88ba      	ldrh	r2, [r7, #4]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	200c      	movs	r0, #12
 8000f22:	f7ff fcd3 	bl	80008cc <NRF24L01_WriteRegister>
		}
		break;
 8000f26:	e018      	b.n	8000f5a <NRF24L01_SetRxAddress+0x156>
		case NRF24L01_RX_ADDRESS_P3:
		{
			NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P3, Address[0], Timeout);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	88ba      	ldrh	r2, [r7, #4]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	200d      	movs	r0, #13
 8000f32:	f7ff fccb 	bl	80008cc <NRF24L01_WriteRegister>
		}
		break;
 8000f36:	e010      	b.n	8000f5a <NRF24L01_SetRxAddress+0x156>
		case NRF24L01_RX_ADDRESS_P4:
		{
			NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P4, Address[0], Timeout);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	88ba      	ldrh	r2, [r7, #4]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	200e      	movs	r0, #14
 8000f42:	f7ff fcc3 	bl	80008cc <NRF24L01_WriteRegister>
		}
		break;
 8000f46:	e008      	b.n	8000f5a <NRF24L01_SetRxAddress+0x156>
		case NRF24L01_RX_ADDRESS_P5:
		{
			NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P5, Address[0], Timeout);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	88ba      	ldrh	r2, [r7, #4]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	200f      	movs	r0, #15
 8000f52:	f7ff fcbb 	bl	80008cc <NRF24L01_WriteRegister>
		}
		break;
 8000f56:	e000      	b.n	8000f5a <NRF24L01_SetRxAddress+0x156>
		default:
		break;
 8000f58:	bf00      	nop
	}

	/* --------------- Set Chip Enable -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_CE_GPIO_PORT, NRF24L01_CE_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <NRF24L01_SetRxAddress+0x16c>)
 8000f62:	f001 f923 	bl	80021ac <HAL_GPIO_WritePin>

}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <NRF24L01_SetRxPayloadWidths>:
	
}

/* ......................... RF Control ........................ */
void NRF24L01_SetRxPayloadWidths(uint8_t Width, uint16_t Timeout)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	80bb      	strh	r3, [r7, #4]
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, Width, Timeout);
 8000f84:	88ba      	ldrh	r2, [r7, #4]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2011      	movs	r0, #17
 8000f8c:	f7ff fc9e 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, Width, Timeout);
 8000f90:	88ba      	ldrh	r2, [r7, #4]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4619      	mov	r1, r3
 8000f96:	2012      	movs	r0, #18
 8000f98:	f7ff fc98 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, Width, Timeout);
 8000f9c:	88ba      	ldrh	r2, [r7, #4]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2013      	movs	r0, #19
 8000fa4:	f7ff fc92 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, Width, Timeout);
 8000fa8:	88ba      	ldrh	r2, [r7, #4]
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4619      	mov	r1, r3
 8000fae:	2014      	movs	r0, #20
 8000fb0:	f7ff fc8c 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, Width, Timeout);
 8000fb4:	88ba      	ldrh	r2, [r7, #4]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2015      	movs	r0, #21
 8000fbc:	f7ff fc86 	bl	80008cc <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, Width, Timeout);
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2016      	movs	r0, #22
 8000fc8:	f7ff fc80 	bl	80008cc <NRF24L01_WriteRegister>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <NRF24L01_SetCRCLength>:

void NRF24L01_SetCRCLength(uint8_t Length, uint16_t Timeout)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80bb      	strh	r3, [r7, #4]
	
	/* ------------ Read Config Register ------------ */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_CONFIG, Timeout) & NRF24L01_CRCO_MASK_RST;
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fc3f 	bl	800086c <NRF24L01_ReadRegister>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	73fb      	strb	r3, [r7, #15]

	__NRF24L01_SET_BIT(regVal, NRF24L01_EN_CRC);
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	73fb      	strb	r3, [r7, #15]
	
	/* ------------- Update CRC Length -------------- */
	switch (Length)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <NRF24L01_SetCRCLength+0x36>
 8001004:	2b02      	cmp	r3, #2
 8001006:	d005      	beq.n	8001014 <NRF24L01_SetCRCLength+0x40>
		{
			__NRF24L01_SET_BIT(regVal, NRF24L01_CRCO); // 2Byte
		}
		break;
		default:
		break;
 8001008:	e009      	b.n	800101e <NRF24L01_SetCRCLength+0x4a>
			__NRF24L01_RESET_BIT(regVal, NRF24L01_CRCO); // 1Byte
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	73fb      	strb	r3, [r7, #15]
		break;
 8001012:	e004      	b.n	800101e <NRF24L01_SetCRCLength+0x4a>
			__NRF24L01_SET_BIT(regVal, NRF24L01_CRCO); // 2Byte
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	73fb      	strb	r3, [r7, #15]
		break;
 800101c:	bf00      	nop
	}
	
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, regVal, Timeout);
 800101e:	88ba      	ldrh	r2, [r7, #4]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc51 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <NRF24L01_SetAutoACK>:

void NRF24L01_SetAutoACK(NRF24L01_AutoACKTypeDef AACK, NRF24L01_StateTypeDef State, uint16_t Timeout)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	460b      	mov	r3, r1
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	4613      	mov	r3, r2
 8001042:	80bb      	strh	r3, [r7, #4]

	/* ------------ Read Config Register ------------ */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_EN_AA, Timeout);
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	4619      	mov	r1, r3
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fc0f 	bl	800086c <NRF24L01_ReadRegister>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]

	/* -------------- Update Auto ACK --------------- */
	if (State == NRF24L01_ENABLE)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d104      	bne.n	8001062 <NRF24L01_SetAutoACK+0x30>
	{
		regVal |= AACK;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4313      	orrs	r3, r2
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e008      	b.n	8001074 <NRF24L01_SetAutoACK+0x42>
	}
	else
	{
		regVal &= ~AACK;
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	43db      	mvns	r3, r3
 8001068:	b25a      	sxtb	r2, r3
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4013      	ands	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]
	}

	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, regVal, Timeout);
 8001074:	88ba      	ldrh	r2, [r7, #4]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4619      	mov	r1, r3
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff fc26 	bl	80008cc <NRF24L01_WriteRegister>

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <NRF24L01_AutoRetransmitCount>:

void NRF24L01_AutoRetransmitCount(uint8_t Count, uint16_t Timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	80bb      	strh	r3, [r7, #4]
	
	/* ------- Read Setup Retransmit Register ------- */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_SETUP_RETR, Timeout) & NRF24L01_ARC_MASK_RST;
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	4619      	mov	r1, r3
 800109c:	2004      	movs	r0, #4
 800109e:	f7ff fbe5 	bl	800086c <NRF24L01_ReadRegister>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	73fb      	strb	r3, [r7, #15]
	
	/* ------- Reset and Update ARC Register -------- */
	regVal |= Count;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	73fb      	strb	r3, [r7, #15]
	
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, regVal, Timeout);
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2004      	movs	r0, #4
 80010ba:	f7ff fc07 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <NRF24L01_AutoRetransmitDelay>:

void NRF24L01_AutoRetransmitDelay(uint16_t DelayTimeUS, uint16_t Timeout)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	80bb      	strh	r3, [r7, #4]
	
	/* ------- Read Setup Retransmit Register ------- */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_SETUP_RETR, Timeout) & NRF24L01_ARD_BIT_MASK_RST;
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	4619      	mov	r1, r3
 80010dc:	2004      	movs	r0, #4
 80010de:	f7ff fbc5 	bl	800086c <NRF24L01_ReadRegister>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	73fb      	strb	r3, [r7, #15]
	
	/* ------- Reset and Update ARD Register -------- */
	
	regVal |= (((DelayTimeUS / 250) - 1) << NRF24L01_ARD);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <NRF24L01_AutoRetransmitDelay+0x54>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	73fb      	strb	r3, [r7, #15]
	
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, regVal, Timeout);
 8001106:	88ba      	ldrh	r2, [r7, #4]
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	4619      	mov	r1, r3
 800110c:	2004      	movs	r0, #4
 800110e:	f7ff fbdd 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	10624dd3 	.word	0x10624dd3

08001120 <NRF24L01_SetRFChannel>:

void NRF24L01_SetRFChannel(uint8_t Channel, uint16_t Timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
	
	/* ------------- Update NRF Channel ------------- */
	NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, Channel, Timeout);
 8001130:	88ba      	ldrh	r2, [r7, #4]
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4619      	mov	r1, r3
 8001136:	2005      	movs	r0, #5
 8001138:	f7ff fbc8 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <NRF24L01_SetRFTxOutputPower>:

void NRF24L01_SetRFTxOutputPower(NRF24L01_PWRTypeDef dBm, uint16_t Timeout)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	4613      	mov	r3, r2
 8001152:	80bb      	strh	r3, [r7, #4]
	
	/* ----------- Read RF Setup Register ----------- */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_RF_SETUP, Timeout) & NRF24L01_RF_PWR_BIT_MASK_RST;
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	4619      	mov	r1, r3
 8001158:	2006      	movs	r0, #6
 800115a:	f7ff fb87 	bl	800086c <NRF24L01_ReadRegister>
 800115e:	4603      	mov	r3, r0
 8001160:	f023 0306 	bic.w	r3, r3, #6
 8001164:	73fb      	strb	r3, [r7, #15]
	
	/* ---------- Reset and Update RF Power --------- */
	regVal |= (dBm << NRF24L01_RF_PWR);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	b25a      	sxtb	r2, r3
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4313      	orrs	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	73fb      	strb	r3, [r7, #15]
	
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, regVal, Timeout);
 8001176:	88ba      	ldrh	r2, [r7, #4]
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4619      	mov	r1, r3
 800117c:	2006      	movs	r0, #6
 800117e:	f7ff fba5 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <NRF24L01_SetRFAirDataRate>:

void NRF24L01_SetRFAirDataRate(NRF24L01_DataRateTypeDef bps, uint16_t Timeout)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	460a      	mov	r2, r1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4613      	mov	r3, r2
 8001198:	80bb      	strh	r3, [r7, #4]
	
	/* ----------- Read RF Setup Register ----------- */
	uint8_t regVal = NRF24L01_ReadRegister(NRF24L01_REG_RF_SETUP, Timeout) & NRF24L01_RF_DR_BIT_MASK_RST;
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	4619      	mov	r1, r3
 800119e:	2006      	movs	r0, #6
 80011a0:	f7ff fb64 	bl	800086c <NRF24L01_ReadRegister>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80011aa:	73fb      	strb	r3, [r7, #15]
	
	/* ------- Reset and Update RF Data Rate -------- */
	switch (bps)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d00b      	beq.n	80011ca <NRF24L01_SetRFAirDataRate+0x40>
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	dc0e      	bgt.n	80011d4 <NRF24L01_SetRFAirDataRate+0x4a>
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00e      	beq.n	80011d8 <NRF24L01_SetRFAirDataRate+0x4e>
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d000      	beq.n	80011c0 <NRF24L01_SetRFAirDataRate+0x36>
		{
			regVal |= (1 << 5);
		}
		break;
		default:
		break;
 80011be:	e009      	b.n	80011d4 <NRF24L01_SetRFAirDataRate+0x4a>
			regVal |= (1 << 3);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	73fb      	strb	r3, [r7, #15]
		break;
 80011c8:	e007      	b.n	80011da <NRF24L01_SetRFAirDataRate+0x50>
			regVal |= (1 << 5);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	73fb      	strb	r3, [r7, #15]
		break;
 80011d2:	e002      	b.n	80011da <NRF24L01_SetRFAirDataRate+0x50>
		break;
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <NRF24L01_SetRFAirDataRate+0x50>
		break;
 80011d8:	bf00      	nop
	}
	
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, regVal, Timeout);
 80011da:	88ba      	ldrh	r2, [r7, #4]
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4619      	mov	r1, r3
 80011e0:	2006      	movs	r0, #6
 80011e2:	f7ff fb73 	bl	80008cc <NRF24L01_WriteRegister>
	
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <NRF24L01_GetStatus>:
	
}

/* ............................................................. */
uint8_t NRF24L01_GetStatus(uint16_t Timeout)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
	
	uint8_t cmd = NRF24L01_CMD_NOP;
 80011fa:	23ff      	movs	r3, #255	@ 0xff
 80011fc:	73fb      	strb	r3, [r7, #15]
	
	uint8_t status;
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <NRF24L01_GetStatus+0x48>)
 8001206:	f000 ffd1 	bl	80021ac <HAL_GPIO_WritePin>
	
	/* ---------------- Receive Data ---------------- */
	NRF24L01_SPI_TransmitReceive(&cmd, &status, 1, 2000);
 800120a:	f107 020e 	add.w	r2, r7, #14
 800120e:	f107 010f 	add.w	r1, r7, #15
 8001212:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	4808      	ldr	r0, [pc, #32]	@ (800123c <NRF24L01_GetStatus+0x4c>)
 800121c:	f001 ff5c 	bl	80030d8 <HAL_SPI_TransmitReceive>
	
	/* --------------- Set Chip Select -------------- */
	NRF24L01_GPIO_WritePin(NRF24L01_SPI_CS_GPIO_PORT, NRF24L01_SPI_CS_GPIO_PIN, NRF24L01_GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001226:	4804      	ldr	r0, [pc, #16]	@ (8001238 <NRF24L01_GetStatus+0x48>)
 8001228:	f000 ffc0 	bl	80021ac <HAL_GPIO_WritePin>
	
	return status;
 800122c:	7bbb      	ldrb	r3, [r7, #14]
	
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	200000c4 	.word	0x200000c4

08001240 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <cs_high+0x14>)
 800124a:	f000 ffaf 	bl	80021ac <HAL_GPIO_WritePin>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020c00 	.word	0x40020c00

08001258 <cs_low>:

static void cs_low()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <cs_low+0x14>)
 8001262:	f000 ffa3 	bl	80021ac <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020c00 	.word	0x40020c00

08001270 <ce_high>:

static void ce_high()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2140      	movs	r1, #64	@ 0x40
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <ce_high+0x14>)
 800127a:	f000 ff97 	bl	80021ac <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020c00 	.word	0x40020c00

08001288 <ce_low>:

static void ce_low()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2140      	movs	r1, #64	@ 0x40
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <ce_low+0x14>)
 8001292:	f000 ff8b 	bl	80021ac <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020c00 	.word	0x40020c00

080012a0 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80012ae:	f7ff ffd3 	bl	8001258 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80012b2:	f107 020e 	add.w	r2, r7, #14
 80012b6:	f107 010f 	add.w	r1, r7, #15
 80012ba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <read_register+0x48>)
 80012c4:	f001 ff08 	bl	80030d8 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80012c8:	f107 010d 	add.w	r1, r7, #13
 80012cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80012d0:	2201      	movs	r2, #1
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <read_register+0x48>)
 80012d4:	f001 fde7 	bl	8002ea6 <HAL_SPI_Receive>
    cs_high();
 80012d8:	f7ff ffb2 	bl	8001240 <cs_high>

    return read_val;
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000006c 	.word	0x2000006c

080012ec <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	b2db      	uxtb	r3, r3
 8001304:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	737b      	strb	r3, [r7, #13]

    cs_low();
 800130a:	f7ff ffa5 	bl	8001258 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800130e:	f107 020e 	add.w	r2, r7, #14
 8001312:	f107 010f 	add.w	r1, r7, #15
 8001316:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	4809      	ldr	r0, [pc, #36]	@ (8001344 <write_register+0x58>)
 8001320:	f001 feda 	bl	80030d8 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8001324:	f107 010d 	add.w	r1, r7, #13
 8001328:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800132c:	2201      	movs	r2, #1
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <write_register+0x58>)
 8001330:	f001 fc75 	bl	8002c1e <HAL_SPI_Transmit>
    cs_high();
 8001334:	f7ff ff84 	bl	8001240 <cs_high>

    return write_val;
 8001338:	7b7b      	ldrb	r3, [r7, #13]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000006c 	.word	0x2000006c

08001348 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	80fb      	strh	r3, [r7, #6]
 8001354:	4613      	mov	r3, r2
 8001356:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8001358:	f000 f850 	bl	80013fc <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 800135c:	f000 f8a2 	bl	80014a4 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8001360:	f000 f94c 	bl	80015fc <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f9d4 	bl	8001714 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fa00 	bl	8001774 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f9e0 	bl	800173a <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 f953 	bl	8001626 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8001380:	2005      	movs	r0, #5
 8001382:	f000 f973 	bl	800166c <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8001386:	2003      	movs	r0, #3
 8001388:	f000 f980 	bl	800168c <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 800138c:	20fa      	movs	r0, #250	@ 0xfa
 800138e:	f000 f999 	bl	80016c4 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8001392:	f7ff ff6d 	bl	8001270 <ce_high>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f892 	bl	80014d0 <nrf24l01p_write_tx_fifo>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80013ba:	f000 f8dd 	bl	8001578 <nrf24l01p_get_status>
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <nrf24l01p_tx_irq+0x44>)
 80013d6:	f000 ff02 	bl	80021de <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 80013da:	f000 f8e7 	bl	80015ac <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80013de:	e007      	b.n	80013f0 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <nrf24l01p_tx_irq+0x44>)
 80013e8:	f000 fee0 	bl	80021ac <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80013ec:	f000 f8f2 	bl	80015d4 <nrf24l01p_clear_max_rt>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020800 	.word	0x40020800

080013fc <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8001400:	f7ff ff1e 	bl	8001240 <cs_high>
    ce_low();
 8001404:	f7ff ff40 	bl	8001288 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8001408:	2108      	movs	r1, #8
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff6e 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8001410:	213f      	movs	r1, #63	@ 0x3f
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ff6a 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8001418:	2103      	movs	r1, #3
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff ff66 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8001420:	2103      	movs	r1, #3
 8001422:	2003      	movs	r0, #3
 8001424:	f7ff ff62 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8001428:	2103      	movs	r1, #3
 800142a:	2004      	movs	r0, #4
 800142c:	f7ff ff5e 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8001430:	2102      	movs	r1, #2
 8001432:	2005      	movs	r0, #5
 8001434:	f7ff ff5a 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8001438:	2107      	movs	r1, #7
 800143a:	2006      	movs	r0, #6
 800143c:	f7ff ff56 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8001440:	217e      	movs	r1, #126	@ 0x7e
 8001442:	2007      	movs	r0, #7
 8001444:	f7ff ff52 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001448:	2100      	movs	r1, #0
 800144a:	2011      	movs	r0, #17
 800144c:	f7ff ff4e 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001450:	2100      	movs	r1, #0
 8001452:	2011      	movs	r0, #17
 8001454:	f7ff ff4a 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8001458:	2100      	movs	r1, #0
 800145a:	2012      	movs	r0, #18
 800145c:	f7ff ff46 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001460:	2100      	movs	r1, #0
 8001462:	2013      	movs	r0, #19
 8001464:	f7ff ff42 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8001468:	2100      	movs	r1, #0
 800146a:	2014      	movs	r0, #20
 800146c:	f7ff ff3e 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001470:	2100      	movs	r1, #0
 8001472:	2015      	movs	r0, #21
 8001474:	f7ff ff3a 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8001478:	2100      	movs	r1, #0
 800147a:	2016      	movs	r0, #22
 800147c:	f7ff ff36 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001480:	2111      	movs	r1, #17
 8001482:	2017      	movs	r0, #23
 8001484:	f7ff ff32 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8001488:	2100      	movs	r1, #0
 800148a:	201c      	movs	r0, #28
 800148c:	f7ff ff2e 	bl	80012ec <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8001490:	2100      	movs	r1, #0
 8001492:	201d      	movs	r0, #29
 8001494:	f7ff ff2a 	bl	80012ec <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8001498:	f000 f83e 	bl	8001518 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 800149c:	f000 f854 	bl	8001548 <nrf24l01p_flush_tx_fifo>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fef8 	bl	80012a0 <read_register>
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4619      	mov	r1, r3
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff13 	bl	80012ec <write_register>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80014d8:	23a0      	movs	r3, #160	@ 0xa0
 80014da:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80014dc:	f7ff febc 	bl	8001258 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80014e0:	f107 020e 	add.w	r2, r7, #14
 80014e4:	f107 010f 	add.w	r1, r7, #15
 80014e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	4808      	ldr	r0, [pc, #32]	@ (8001514 <nrf24l01p_write_tx_fifo+0x44>)
 80014f2:	f001 fdf1 	bl	80030d8 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80014f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014fa:	2220      	movs	r2, #32
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <nrf24l01p_write_tx_fifo+0x44>)
 8001500:	f001 fb8d 	bl	8002c1e <HAL_SPI_Transmit>
    cs_high(); 
 8001504:	f7ff fe9c 	bl	8001240 <cs_high>

    return status;
 8001508:	7bbb      	ldrb	r3, [r7, #14]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000006c 	.word	0x2000006c

08001518 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800151e:	23e2      	movs	r3, #226	@ 0xe2
 8001520:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001522:	f7ff fe99 	bl	8001258 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001526:	1dba      	adds	r2, r7, #6
 8001528:	1df9      	adds	r1, r7, #7
 800152a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	4804      	ldr	r0, [pc, #16]	@ (8001544 <nrf24l01p_flush_rx_fifo+0x2c>)
 8001534:	f001 fdd0 	bl	80030d8 <HAL_SPI_TransmitReceive>
    cs_high();
 8001538:	f7ff fe82 	bl	8001240 <cs_high>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000006c 	.word	0x2000006c

08001548 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800154e:	23e1      	movs	r3, #225	@ 0xe1
 8001550:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001552:	f7ff fe81 	bl	8001258 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001556:	1dba      	adds	r2, r7, #6
 8001558:	1df9      	adds	r1, r7, #7
 800155a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	4804      	ldr	r0, [pc, #16]	@ (8001574 <nrf24l01p_flush_tx_fifo+0x2c>)
 8001564:	f001 fdb8 	bl	80030d8 <HAL_SPI_TransmitReceive>
    cs_high();
 8001568:	f7ff fe6a 	bl	8001240 <cs_high>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000006c 	.word	0x2000006c

08001578 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800157e:	23ff      	movs	r3, #255	@ 0xff
 8001580:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001582:	f7ff fe69 	bl	8001258 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001586:	1dba      	adds	r2, r7, #6
 8001588:	1df9      	adds	r1, r7, #7
 800158a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <nrf24l01p_get_status+0x30>)
 8001594:	f001 fda0 	bl	80030d8 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8001598:	f7ff fe52 	bl	8001240 <cs_high>

    return status;
 800159c:	79bb      	ldrb	r3, [r7, #6]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000006c 	.word	0x2000006c

080015ac <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80015b2:	f7ff ffe1 	bl	8001578 <nrf24l01p_get_status>
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4619      	mov	r1, r3
 80015c6:	2007      	movs	r0, #7
 80015c8:	f7ff fe90 	bl	80012ec <write_register>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80015da:	f7ff ffcd 	bl	8001578 <nrf24l01p_get_status>
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f043 0310 	orr.w	r3, r3, #16
 80015e8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4619      	mov	r1, r3
 80015ee:	2007      	movs	r0, #7
 80015f0:	f7ff fe7c 	bl	80012ec <write_register>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fe4c 	bl	80012a0 <read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4619      	mov	r1, r3
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fe67 	bl	80012ec <write_register>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fe35 	bl	80012a0 <read_register>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d002      	beq.n	8001646 <nrf24l01p_set_crc_length+0x20>
 8001640:	2b02      	cmp	r3, #2
 8001642:	d005      	beq.n	8001650 <nrf24l01p_set_crc_length+0x2a>
 8001644:	e009      	b.n	800165a <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	73fb      	strb	r3, [r7, #15]
            break;
 800164e:	e004      	b.n	800165a <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	73fb      	strb	r3, [r7, #15]
            break;
 8001658:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	4619      	mov	r1, r3
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fe44 	bl	80012ec <write_register>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	3b02      	subs	r3, #2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	2003      	movs	r0, #3
 8001680:	f7ff fe34 	bl	80012ec <write_register>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001696:	2004      	movs	r0, #4
 8001698:	f7ff fe02 	bl	80012a0 <read_register>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	f063 030f 	orn	r3, r3, #15
 80016a6:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4619      	mov	r1, r3
 80016b4:	2004      	movs	r0, #4
 80016b6:	f7ff fe19 	bl	80012ec <write_register>
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80016ce:	2004      	movs	r0, #4
 80016d0:	f7ff fde6 	bl	80012a0 <read_register>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	f043 030f 	orr.w	r3, r3, #15
 80016de:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <nrf24l01p_auto_retransmit_delay+0x4c>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	4619      	mov	r1, r3
 8001700:	2004      	movs	r0, #4
 8001702:	f7ff fdf3 	bl	80012ec <write_register>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8001724:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4619      	mov	r1, r3
 800172c:	2005      	movs	r0, #5
 800172e:	f7ff fddd 	bl	80012ec <write_register>
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8001744:	2006      	movs	r0, #6
 8001746:	f7ff fdab 	bl	80012a0 <read_register>
 800174a:	4603      	mov	r3, r0
 800174c:	f023 0306 	bic.w	r3, r3, #6
 8001750:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	4619      	mov	r1, r3
 8001766:	2006      	movs	r0, #6
 8001768:	f7ff fdc0 	bl	80012ec <write_register>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800177e:	2006      	movs	r0, #6
 8001780:	f7ff fd8e 	bl	80012a0 <read_register>
 8001784:	4603      	mov	r3, r0
 8001786:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800178a:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d00a      	beq.n	80017a8 <nrf24l01p_set_rf_air_data_rate+0x34>
 8001792:	2b02      	cmp	r3, #2
 8001794:	dc0e      	bgt.n	80017b4 <nrf24l01p_set_rf_air_data_rate+0x40>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10a      	bne.n	80017b4 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	73fb      	strb	r3, [r7, #15]
            break;
 80017a6:	e005      	b.n	80017b4 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	73fb      	strb	r3, [r7, #15]
            break;
 80017b0:	e000      	b.n	80017b4 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80017b2:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	4619      	mov	r1, r3
 80017b8:	2006      	movs	r0, #6
 80017ba:	f7ff fd97 	bl	80012ec <write_register>
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2210      	movs	r2, #16
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_SPI1_Init+0x64>)
 800181a:	f001 f977 	bl	8002b0c <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001824:	f7ff f81c 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000006c 	.word	0x2000006c
 8001830:	40013000 	.word	0x40013000

08001834 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_SPI2_Init+0x64>)
 800183a:	4a18      	ldr	r2, [pc, #96]	@ (800189c <MX_SPI2_Init+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_SPI2_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_SPI2_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001864:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_SPI2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <MX_SPI2_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001880:	220a      	movs	r2, #10
 8001882:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001886:	f001 f941 	bl	8002b0c <HAL_SPI_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001890:	f7fe ffe6 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200000c4 	.word	0x200000c4
 800189c:	40003800 	.word	0x40003800

080018a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a41      	ldr	r2, [pc, #260]	@ (80019c4 <HAL_SPI_MspInit+0x124>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12c      	bne.n	800191c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a3f      	ldr	r2, [pc, #252]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 80018cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a38      	ldr	r2, [pc, #224]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018fa:	2338      	movs	r3, #56	@ 0x38
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190a:	2305      	movs	r3, #5
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	482d      	ldr	r0, [pc, #180]	@ (80019cc <HAL_SPI_MspInit+0x12c>)
 8001916:	f000 faad 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800191a:	e04f      	b.n	80019bc <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <HAL_SPI_MspInit+0x130>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d14a      	bne.n	80019bc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a1f      	ldr	r2, [pc, #124]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a18      	ldr	r2, [pc, #96]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <HAL_SPI_MspInit+0x128>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197a:	230c      	movs	r3, #12
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198a:	2305      	movs	r3, #5
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	480f      	ldr	r0, [pc, #60]	@ (80019d4 <HAL_SPI_MspInit+0x134>)
 8001996:	f000 fa6d 	bl	8001e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800199a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ac:	2305      	movs	r3, #5
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <HAL_SPI_MspInit+0x12c>)
 80019b8:	f000 fa5c 	bl	8001e74 <HAL_GPIO_Init>
}
 80019bc:	bf00      	nop
 80019be:	3730      	adds	r7, #48	@ 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013000 	.word	0x40013000
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40003800 	.word	0x40003800
 80019d4:	40020800 	.word	0x40020800

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <HAL_MspInit+0x4c>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <HAL_MspInit+0x4c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <HAL_MspInit+0x4c>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <NMI_Handler+0x4>

08001a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <MemManage_Handler+0x4>

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7e:	f000 f8a3 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a8a:	2020      	movs	r0, #32
 8001a8c:	f000 fbc2 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a98:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001a9c:	f000 fbba 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001aa0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001aa4:	f000 fbb6 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ad4:	f7ff ffea 	bl	8001aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ada:	490d      	ldr	r1, [pc, #52]	@ (8001b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afe:	f001 fddf 	bl	80036c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7fe fd99 	bl	8000638 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001b14:	08003750 	.word	0x08003750
  ldr r2, =_sbss
 8001b18:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001b1c:	20000120 	.word	0x20000120

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_Init+0x40>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_Init+0x40>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_Init+0x40>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f94f 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	200f      	movs	r0, #15
 8001b54:	f000 f808 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff ff3e 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f967 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f92f 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000024 	.word	0x20000024
 8001bc0:	2000002c 	.word	0x2000002c
 8001bc4:	20000028 	.word	0x20000028

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000002c 	.word	0x2000002c
 8001bec:	2000011c 	.word	0x2000011c

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000011c 	.word	0x2000011c

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000002c 	.word	0x2000002c

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	@ (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	@ (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e16b      	b.n	8002168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 815a 	bne.w	8002162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80b4 	beq.w	8002162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b60      	ldr	r3, [pc, #384]	@ (8002180 <HAL_GPIO_Init+0x30c>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a5f      	ldr	r2, [pc, #380]	@ (8002180 <HAL_GPIO_Init+0x30c>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b5d      	ldr	r3, [pc, #372]	@ (8002180 <HAL_GPIO_Init+0x30c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a5b      	ldr	r2, [pc, #364]	@ (8002184 <HAL_GPIO_Init+0x310>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a52      	ldr	r2, [pc, #328]	@ (8002188 <HAL_GPIO_Init+0x314>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <HAL_GPIO_Init+0x226>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a51      	ldr	r2, [pc, #324]	@ (800218c <HAL_GPIO_Init+0x318>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x222>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a50      	ldr	r2, [pc, #320]	@ (8002190 <HAL_GPIO_Init+0x31c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x21e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4f      	ldr	r2, [pc, #316]	@ (8002194 <HAL_GPIO_Init+0x320>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x21a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4e      	ldr	r2, [pc, #312]	@ (8002198 <HAL_GPIO_Init+0x324>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x216>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4d      	ldr	r2, [pc, #308]	@ (800219c <HAL_GPIO_Init+0x328>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x212>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4c      	ldr	r2, [pc, #304]	@ (80021a0 <HAL_GPIO_Init+0x32c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x20e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4b      	ldr	r2, [pc, #300]	@ (80021a4 <HAL_GPIO_Init+0x330>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x20a>
 800207a:	2307      	movs	r3, #7
 800207c:	e00e      	b.n	800209c <HAL_GPIO_Init+0x228>
 800207e:	2308      	movs	r3, #8
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x228>
 8002082:	2306      	movs	r3, #6
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x228>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x228>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x228>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x228>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x228>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x228>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	@ (8002184 <HAL_GPIO_Init+0x310>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b3b      	ldr	r3, [pc, #236]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b30      	ldr	r3, [pc, #192]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a12      	ldr	r2, [pc, #72]	@ (80021a8 <HAL_GPIO_Init+0x334>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f ae90 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40021400 	.word	0x40021400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40021c00 	.word	0x40021c00
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	041a      	lsls	r2, r3, #16
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800221e:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe faec 	bl	8000810 <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e267      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d075      	beq.n	800234e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002262:	4b88      	ldr	r3, [pc, #544]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d00c      	beq.n	8002288 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226e:	4b85      	ldr	r3, [pc, #532]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002276:	2b08      	cmp	r3, #8
 8002278:	d112      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227a:	4b82      	ldr	r3, [pc, #520]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002286:	d10b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d05b      	beq.n	800234c <HAL_RCC_OscConfig+0x108>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d157      	bne.n	800234c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e242      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_OscConfig+0x74>
 80022aa:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a75      	ldr	r2, [pc, #468]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b70      	ldr	r3, [pc, #448]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6f      	ldr	r2, [pc, #444]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022dc:	4b69      	ldr	r3, [pc, #420]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a68      	ldr	r2, [pc, #416]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b66      	ldr	r3, [pc, #408]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc78 	bl	8001bf0 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc74 	bl	8001bf0 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e207      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xc0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fc64 	bl	8001bf0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fc60 	bl	8001bf0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	@ 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1f3      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b51      	ldr	r3, [pc, #324]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0xe8>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800235a:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b44      	ldr	r3, [pc, #272]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b41      	ldr	r3, [pc, #260]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1c7      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3b      	ldr	r3, [pc, #236]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4937      	ldr	r1, [pc, #220]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <HAL_RCC_OscConfig+0x244>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff fc19 	bl	8001bf0 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c2:	f7ff fc15 	bl	8001bf0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1a8      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4925      	ldr	r1, [pc, #148]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b24      	ldr	r3, [pc, #144]	@ (8002488 <HAL_RCC_OscConfig+0x244>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fbf8 	bl	8001bf0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fbf4 	bl	8001bf0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e187      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d036      	beq.n	800249c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_RCC_OscConfig+0x248>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff fbd8 	bl	8001bf0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7ff fbd4 	bl	8001bf0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e167      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_RCC_OscConfig+0x240>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x200>
 8002462:	e01b      	b.n	800249c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_OscConfig+0x248>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fbc1 	bl	8001bf0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	e00e      	b.n	8002490 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002472:	f7ff fbbd 	bl	8001bf0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d907      	bls.n	8002490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e150      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000
 800248c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ea      	bne.n	8002472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8097 	beq.w	80025d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b81      	ldr	r3, [pc, #516]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b7d      	ldr	r3, [pc, #500]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	4a7c      	ldr	r2, [pc, #496]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ca:	4b7a      	ldr	r3, [pc, #488]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b77      	ldr	r3, [pc, #476]	@ (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b74      	ldr	r3, [pc, #464]	@ (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	@ (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fb7d 	bl	8001bf0 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fb79 	bl	8001bf0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e10c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_OscConfig+0x474>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x2ea>
 8002520:	4b64      	ldr	r3, [pc, #400]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002524:	4a63      	ldr	r2, [pc, #396]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	@ 0x70
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x30c>
 8002536:	4b5f      	ldr	r3, [pc, #380]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	4a5e      	ldr	r2, [pc, #376]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	@ 0x70
 8002542:	4b5c      	ldr	r3, [pc, #368]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	4a5b      	ldr	r2, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	@ 0x70
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 8002550:	4b58      	ldr	r3, [pc, #352]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	4a57      	ldr	r2, [pc, #348]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	@ 0x70
 800255c:	4b55      	ldr	r3, [pc, #340]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002560:	4a54      	ldr	r2, [pc, #336]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff fb3e 	bl	8001bf0 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7ff fb3a 	bl	8001bf0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0cb      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	4b49      	ldr	r3, [pc, #292]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ee      	beq.n	8002578 <HAL_RCC_OscConfig+0x334>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fb28 	bl	8001bf0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff fb24 	bl	8001bf0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0b5      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ee      	bne.n	80025a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	4a38      	ldr	r2, [pc, #224]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a1 	beq.w	8002724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e2:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d05c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d141      	bne.n	800267a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCC_OscConfig+0x478>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff faf8 	bl	8001bf0 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff faf4 	bl	8001bf0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e087      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	019b      	lsls	r3, r3, #6
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	491b      	ldr	r1, [pc, #108]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <HAL_RCC_OscConfig+0x478>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff facd 	bl	8001bf0 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fac9 	bl	8001bf0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e05c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x416>
 8002678:	e054      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_RCC_OscConfig+0x478>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fab6 	bl	8001bf0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fab2 	bl	8001bf0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e045      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_RCC_OscConfig+0x470>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e038      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x4ec>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d028      	beq.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d121      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d11a      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026f0:	4013      	ands	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cc      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b68      	ldr	r3, [pc, #416]	@ (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d90c      	bls.n	8002770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b65      	ldr	r3, [pc, #404]	@ (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d044      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3b      	ldr	r3, [pc, #236]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e067      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4934      	ldr	r1, [pc, #208]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff f9e4 	bl	8001bf0 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7ff f9e0 	bl	8001bf0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d20c      	bcs.n	800287c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f944 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08003730 	.word	0x08003730
 80028f8:	20000024 	.word	0x20000024
 80028fc:	20000028 	.word	0x20000028

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b094      	sub	sp, #80	@ 0x50
 8002906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4b79      	ldr	r3, [pc, #484]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d00d      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x40>
 8002924:	2b08      	cmp	r3, #8
 8002926:	f200 80e1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x3a>
 8002932:	e0db      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b73      	ldr	r3, [pc, #460]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002938:	e0db      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b73      	ldr	r3, [pc, #460]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800293c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800293e:	e0d8      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b6f      	ldr	r3, [pc, #444]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002948:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	2200      	movs	r2, #0
 800295e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002960:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	633b      	str	r3, [r7, #48]	@ 0x30
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	@ 0x34
 800296e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002972:	4622      	mov	r2, r4
 8002974:	462b      	mov	r3, r5
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4621      	mov	r1, r4
 800298c:	1a51      	subs	r1, r2, r1
 800298e:	6139      	str	r1, [r7, #16]
 8002990:	4629      	mov	r1, r5
 8002992:	eb63 0301 	sbc.w	r3, r3, r1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a4:	4659      	mov	r1, fp
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	4651      	mov	r1, sl
 80029aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ae:	4651      	mov	r1, sl
 80029b0:	018a      	lsls	r2, r1, #6
 80029b2:	4651      	mov	r1, sl
 80029b4:	ebb2 0801 	subs.w	r8, r2, r1
 80029b8:	4659      	mov	r1, fp
 80029ba:	eb63 0901 	sbc.w	r9, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb18 0303 	adds.w	r3, r8, r3
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	462b      	mov	r3, r5
 80029e0:	eb49 0303 	adc.w	r3, r9, r3
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f2:	4629      	mov	r1, r5
 80029f4:	024b      	lsls	r3, r1, #9
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029fc:	4621      	mov	r1, r4
 80029fe:	024a      	lsls	r2, r1, #9
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a10:	f7fd fbda 	bl	80001c8 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a1c:	e058      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b38      	ldr	r3, [pc, #224]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	4611      	mov	r1, r2
 8002a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a70:	ebb2 040a 	subs.w	r4, r2, sl
 8002a74:	eb63 050b 	sbc.w	r5, r3, fp
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	00eb      	lsls	r3, r5, #3
 8002a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a86:	00e2      	lsls	r2, r4, #3
 8002a88:	4614      	mov	r4, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	18e3      	adds	r3, r4, r3
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	464b      	mov	r3, r9
 8002a94:	eb45 0303 	adc.w	r3, r5, r3
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	028b      	lsls	r3, r1, #10
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	028a      	lsls	r2, r1, #10
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	61fa      	str	r2, [r7, #28]
 8002ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac4:	f7fd fb80 	bl	80001c8 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3750      	adds	r7, #80	@ 0x50
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07b      	b.n	8002c16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b2e:	d009      	beq.n	8002b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	e005      	b.n	8002b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe fe9e 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc8:	ea42 0103 	orr.w	r1, r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0104 	and.w	r1, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f003 0210 	and.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b088      	sub	sp, #32
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c2e:	f7fe ffdf 	bl	8001bf0 <HAL_GetTick>
 8002c32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d001      	beq.n	8002c48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
 8002c46:	e12a      	b.n	8002e9e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Transmit+0x36>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e122      	b.n	8002e9e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_SPI_Transmit+0x48>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e11b      	b.n	8002e9e <HAL_SPI_Transmit+0x280>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d007      	beq.n	8002cf4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cfc:	d152      	bne.n	8002da4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_SPI_Transmit+0xee>
 8002d06:	8b7b      	ldrh	r3, [r7, #26]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d145      	bne.n	8002d98 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d30:	e032      	b.n	8002d98 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d112      	bne.n	8002d66 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	881a      	ldrh	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d64:	e018      	b.n	8002d98 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d66:	f7fe ff43 	bl	8001bf0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d803      	bhi.n	8002d7e <HAL_SPI_Transmit+0x160>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d102      	bne.n	8002d84 <HAL_SPI_Transmit+0x166>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e082      	b.n	8002e9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1c7      	bne.n	8002d32 <HAL_SPI_Transmit+0x114>
 8002da2:	e053      	b.n	8002e4c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Transmit+0x194>
 8002dac:	8b7b      	ldrh	r3, [r7, #26]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d147      	bne.n	8002e42 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dd8:	e033      	b.n	8002e42 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d113      	bne.n	8002e10 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	7812      	ldrb	r2, [r2, #0]
 8002df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e0e:	e018      	b.n	8002e42 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e10:	f7fe feee 	bl	8001bf0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d803      	bhi.n	8002e28 <HAL_SPI_Transmit+0x20a>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d102      	bne.n	8002e2e <HAL_SPI_Transmit+0x210>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e02d      	b.n	8002e9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1c6      	bne.n	8002dda <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fbd9 	bl	8003608 <SPI_EndRxTxTransaction>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b088      	sub	sp, #32
 8002eaa:	af02      	add	r7, sp, #8
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e104      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ece:	d112      	bne.n	8002ef6 <HAL_SPI_Receive+0x50>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2204      	movs	r2, #4
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8f3 	bl	80030d8 <HAL_SPI_TransmitReceive>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	e0ec      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef6:	f7fe fe7b 	bl	8001bf0 <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Receive+0x62>
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0e1      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Receive+0x74>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0da      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f68:	d10f      	bne.n	8002f8a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	d007      	beq.n	8002fa8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d170      	bne.n	8003092 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fb0:	e035      	b.n	800301e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d115      	bne.n	8002fec <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f103 020c 	add.w	r2, r3, #12
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fea:	e018      	b.n	800301e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fec:	f7fe fe00 	bl	8001bf0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d803      	bhi.n	8003004 <HAL_SPI_Receive+0x15e>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d102      	bne.n	800300a <HAL_SPI_Receive+0x164>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e058      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c4      	bne.n	8002fb2 <HAL_SPI_Receive+0x10c>
 8003028:	e038      	b.n	800309c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d113      	bne.n	8003060 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	b292      	uxth	r2, r2
 8003044:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800305e:	e018      	b.n	8003092 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003060:	f7fe fdc6 	bl	8001bf0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d803      	bhi.n	8003078 <HAL_SPI_Receive+0x1d2>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d102      	bne.n	800307e <HAL_SPI_Receive+0x1d8>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e01e      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1c6      	bne.n	800302a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fa4b 	bl	800353c <SPI_EndRxTransaction>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030e6:	2301      	movs	r3, #1
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ea:	f7fe fd81 	bl	8001bf0 <HAL_GetTick>
 80030ee:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030f6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d00c      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x4a>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800310e:	d106      	bne.n	800311e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_SPI_TransmitReceive+0x46>
 8003118:	7ffb      	ldrb	r3, [r7, #31]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d001      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	e17f      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x5c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x5c>
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e174      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x6e>
 8003142:	2302      	movs	r3, #2
 8003144:	e16d      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	887a      	ldrh	r2, [r7, #2]
 8003172:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	887a      	ldrh	r2, [r7, #2]
 800318a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a2:	2b40      	cmp	r3, #64	@ 0x40
 80031a4:	d007      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031be:	d17e      	bne.n	80032be <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_TransmitReceive+0xf6>
 80031c8:	8afb      	ldrh	r3, [r7, #22]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d16c      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	1c9a      	adds	r2, r3, #2
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f2:	e059      	b.n	80032a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d11b      	bne.n	800323a <HAL_SPI_TransmitReceive+0x162>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_SPI_TransmitReceive+0x162>
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	2b01      	cmp	r3, #1
 8003210:	d113      	bne.n	800323a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	1c9a      	adds	r2, r3, #2
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d119      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1a4>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d014      	beq.n	800327c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	b292      	uxth	r2, r2
 800325e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	1c9a      	adds	r2, r3, #2
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800327c:	f7fe fcb8 	bl	8001bf0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003288:	429a      	cmp	r2, r3
 800328a:	d80d      	bhi.n	80032a8 <HAL_SPI_TransmitReceive+0x1d0>
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d009      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0bc      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1a0      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x11c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d19b      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x11c>
 80032bc:	e082      	b.n	80033c4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x1f4>
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d171      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f2:	e05d      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d11c      	bne.n	800333c <HAL_SPI_TransmitReceive+0x264>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <HAL_SPI_TransmitReceive+0x264>
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	2b01      	cmp	r3, #1
 8003310:	d114      	bne.n	800333c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d119      	bne.n	800337e <HAL_SPI_TransmitReceive+0x2a6>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d014      	beq.n	800337e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800337a:	2301      	movs	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800337e:	f7fe fc37 	bl	8001bf0 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338a:	429a      	cmp	r2, r3
 800338c:	d803      	bhi.n	8003396 <HAL_SPI_TransmitReceive+0x2be>
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d102      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2c4>
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e038      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d19c      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x21c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d197      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f91d 	bl	8003608 <SPI_EndRxTxTransaction>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e01d      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003420:	2300      	movs	r3, #0
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3728      	adds	r7, #40	@ 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800343c:	f7fe fbd8 	bl	8001bf0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4413      	add	r3, r2
 800344a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800344c:	f7fe fbd0 	bl	8001bf0 <HAL_GetTick>
 8003450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003452:	4b39      	ldr	r3, [pc, #228]	@ (8003538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	0d1b      	lsrs	r3, r3, #20
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003462:	e054      	b.n	800350e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d050      	beq.n	800350e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800346c:	f7fe fbc0 	bl	8001bf0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	429a      	cmp	r2, r3
 800347a:	d902      	bls.n	8003482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d13d      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349a:	d111      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a4:	d004      	beq.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ae:	d107      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c8:	d10f      	bne.n	80034ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e017      	b.n	800352e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3b01      	subs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d19b      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000024 	.word	0x20000024

0800353c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003550:	d111      	bne.n	8003576 <SPI_EndRxTransaction+0x3a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800355a:	d004      	beq.n	8003566 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003564:	d107      	bne.n	8003576 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800357e:	d12a      	bne.n	80035d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003588:	d012      	beq.n	80035b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	@ 0x80
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff ff49 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02d      	beq.n	80035fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e026      	b.n	80035fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2101      	movs	r1, #1
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff ff36 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01a      	beq.n	80035fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e013      	b.n	80035fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2200      	movs	r2, #0
 80035de:	2101      	movs	r1, #1
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff23 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e000      	b.n	80035fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2201      	movs	r2, #1
 800361c:	2102      	movs	r1, #2
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff04 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e032      	b.n	80036a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800363a:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <SPI_EndRxTxTransaction+0xa0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1b      	ldr	r2, [pc, #108]	@ (80036ac <SPI_EndRxTxTransaction+0xa4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0d5b      	lsrs	r3, r3, #21
 8003646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003658:	d112      	bne.n	8003680 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	2180      	movs	r1, #128	@ 0x80
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff fee1 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d016      	beq.n	800369e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e00f      	b.n	80036a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3b01      	subs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b80      	cmp	r3, #128	@ 0x80
 8003698:	d0f2      	beq.n	8003680 <SPI_EndRxTxTransaction+0x78>
 800369a:	e000      	b.n	800369e <SPI_EndRxTxTransaction+0x96>
        break;
 800369c:	bf00      	nop
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000024 	.word	0x20000024
 80036ac:	165e9f81 	.word	0x165e9f81

080036b0 <memset>:
 80036b0:	4402      	add	r2, r0
 80036b2:	4603      	mov	r3, r0
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d100      	bne.n	80036ba <memset+0xa>
 80036b8:	4770      	bx	lr
 80036ba:	f803 1b01 	strb.w	r1, [r3], #1
 80036be:	e7f9      	b.n	80036b4 <memset+0x4>

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4d0d      	ldr	r5, [pc, #52]	@ (80036f8 <__libc_init_array+0x38>)
 80036c4:	4c0d      	ldr	r4, [pc, #52]	@ (80036fc <__libc_init_array+0x3c>)
 80036c6:	1b64      	subs	r4, r4, r5
 80036c8:	10a4      	asrs	r4, r4, #2
 80036ca:	2600      	movs	r6, #0
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003700 <__libc_init_array+0x40>)
 80036d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003704 <__libc_init_array+0x44>)
 80036d4:	f000 f818 	bl	8003708 <_init>
 80036d8:	1b64      	subs	r4, r4, r5
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	2600      	movs	r6, #0
 80036de:	42a6      	cmp	r6, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e8:	4798      	blx	r3
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f2:	4798      	blx	r3
 80036f4:	3601      	adds	r6, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	08003748 	.word	0x08003748
 80036fc:	08003748 	.word	0x08003748
 8003700:	08003748 	.word	0x08003748
 8003704:	0800374c 	.word	0x0800374c

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
